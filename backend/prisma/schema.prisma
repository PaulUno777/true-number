generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  email        String   @unique
  password     String
  phone        String
  role         Role     @default(CLIENT)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdGames   MultiplayerGame[]        @relation("CreatedGames")
  participations MultiplayerParticipant[] @relation("GameParticipations")
  soloGames      SoloGame[]
  transactions   Transaction[]

  @@map("users")
}

model SoloGame {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  bet             Int // Bet
  chosenNumber    Int // Guessed number
  generatedNumber Int // Generated
  result          SoloGameResult // result
  balanceChange   Int // balance change(+/-)
  multiplier      Float
  playedAt        DateTime       @default(now())
  transactionId   String?        @db.ObjectId

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@map("solo_games")
}

model MultiplayerGame {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  bet          Int
  thinkingTime Int
  status       GameStatus @default(WAITING)
  createdBy    String     @db.ObjectId
  winnerId     String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  startedAt    DateTime?
  finishedAt   DateTime?

  creator User                     @relation("CreatedGames", fields: [createdBy], references: [id])
  players MultiplayerParticipant[]

  @@map("multiplayer_games")
}

model MultiplayerParticipant {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  gameId          String    @db.ObjectId
  playerId        String    @db.ObjectId
  generatedNumber Int?
  playedAt        DateTime?
  isWinner        Boolean   @default(false)
  balanceChange   Int       @default(0)
  joinedAt        DateTime  @default(now())
  transactionId   String?   @db.ObjectId // Reference to the transaction

  game        MultiplayerGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      User            @relation("GameParticipations", fields: [playerId], references: [id], onDelete: Cascade)
  transaction Transaction?    @relation(fields: [transactionId], references: [id])

  @@unique([gameId, playerId])
  @@map("multiplayer_participants")
}

model Transaction {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  userId       String            @db.ObjectId
  type         TransactionType
  amount       Int
  description  String
  balanceAfter Int
  reference    String?
  status       TransactionStatus @default(COMPLETED)
  createdAt    DateTime          @default(now())

  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  soloGames               SoloGame[]
  multiplayerParticipants MultiplayerParticipant[]
  recharge                Recharge?

  @@map("transactions")
}

model Recharge {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  amount        Int // Amount in cents
  method        PaymentMethod
  status        RechargeStatus @default(PENDING)
  transactionId String         @unique @db.ObjectId
  billingData   Json // Store fake billing information
  createdAt     DateTime       @default(now())
  completedAt   DateTime?

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("recharges")
}

enum Role {
  CLIENT
  ADMIN
}

enum SoloGameResult {
  EXACT_MATCH // 2x 
  HIGHER // 1.5x  
  LOWER // loose
}

enum GameStatus {
  WAITING // Waiting second player
  IN_PROGRESS // On game
  FINISHED
  CANCELLED
}

enum TransactionType {
  CREDIT // Money coming in (recharge, game win)
  DEBIT // Money going out (game bet, game loss)
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum RechargeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
