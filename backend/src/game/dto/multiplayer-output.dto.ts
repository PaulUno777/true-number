import { ApiProperty } from '@nestjs/swagger';
import { GameStatus } from '@generated/prisma';

export class GamePlayerDto {
  @ApiProperty({
    description: 'Player ID',
    example: '507f1f77bcf86cd799439011',
  })
  id: string;

  @ApiProperty({
    description: 'Username',
    example: 'player1',
  })
  username: string;

  @ApiProperty({
    description: 'Number generated by the player',
    example: 75,
    nullable: true,
  })
  generatedNumber?: number;

  @ApiProperty({
    description: 'Date and time the player played',
    example: '2024-01-01T12:00:00Z',
    nullable: true,
  })
  playedAt?: Date;

  @ApiProperty({
    description: 'Whether the player is the winner',
    example: false,
  })
  isWinner: boolean;

  @ApiProperty({
    description: 'Balance change for the player in this game',
    example: 100,
  })
  balanceChange: number;
}

export class MultiplayerGameDto {
  @ApiProperty({
    description: 'Game ID',
    example: '507f1f77bcf86cd799439011',
  })
  id: string;

  @ApiProperty({
    description: 'Bet amount for the game',
    example: 100,
  })
  bet: number;

  @ApiProperty({
    description: 'Thinking time in seconds',
    example: 30,
  })
  thinkingTime: number;

  @ApiProperty({
    description: 'Current status of the game',
    enum: GameStatus,
    example: GameStatus.WAITING,
  })
  status: GameStatus;

  @ApiProperty({
    description: 'ID of the creator',
    example: '507f1f77bcf86cd799439011',
  })
  createdBy: string;

  @ApiProperty({
    description: 'Username of the creator',
    example: 'creator_user',
  })
  creatorUsername: string;

  @ApiProperty({
    description: 'Winner ID',
    example: '507f1f77bcf86cd799439011',
    nullable: true,
  })
  winnerId?: string;

  @ApiProperty({
    description: 'ID of the player whose turn it is',
    example: '507f1f77bcf86cd799439011',
    nullable: true,
  })
  currentTurnPlayerId?: string;

  @ApiProperty({
    description: 'Date the game was created',
    example: '2024-01-01T12:00:00Z',
  })
  createdAt: Date;

  @ApiProperty({
    description: 'Start date of the game',
    example: '2024-01-01T12:00:00Z',
    nullable: true,
  })
  startedAt?: Date;

  @ApiProperty({
    description: 'End date of the game',
    example: '2024-01-01T12:00:00Z',
    nullable: true,
  })
  finishedAt?: Date;

  @ApiProperty({
    description: 'Players in the game',
    type: [GamePlayerDto],
  })
  players: GamePlayerDto[];
}

export class GameResponseDto {
  @ApiProperty({
    description: 'Created game',
    type: MultiplayerGameDto,
  })
  game: MultiplayerGameDto;

  @ApiProperty({
    description: 'Success message',
    example: 'Game created successfully',
  })
  message: string;
}

export class GetWaitingGamesResponseDto {
  @ApiProperty({
    description: 'List of waiting games',
    type: [MultiplayerGameDto],
  })
  games: MultiplayerGameDto[];

  @ApiProperty({
    description: 'Message',
    example: 'Waiting games retrieved successfully',
  })
  message: string;
}

export class JoinGameResponseDto {
  @ApiProperty({
    description: 'Joined game',
    type: MultiplayerGameDto,
  })
  game: MultiplayerGameDto;

  @ApiProperty({
    description: 'Success message',
    example: 'Joined game successfully',
  })
  message: string;
}

export class PlayTurnResponseDto {
  @ApiProperty({
    description: 'Generated number',
    example: 75,
  })
  generatedNumber: number;

  @ApiProperty({
    description: 'Updated game state',
    type: MultiplayerGameDto,
  })
  game: MultiplayerGameDto;

  @ApiProperty({
    description: 'Message',
    example: 'Turn played successfully',
  })
  message: string;
}

export class GameFinishedResponseDto {
  @ApiProperty({
    description: 'Finished game',
    type: MultiplayerGameDto,
  })
  game: MultiplayerGameDto;

  @ApiProperty({
    description: 'Winner ID',
    example: '507f1f77bcf86cd799439011',
  })
  winnerId: string;

  @ApiProperty({
    description: 'Winner username',
    example: 'winner_user',
  })
  winnerUsername: string;

  @ApiProperty({
    description: 'Result message',
    example: 'winner_user wins the game and receives 100 points!',
  })
  message: string;
}

export class GetUserGamesResponseDto {
  @ApiProperty({
    description: "User's game history",
    type: [MultiplayerGameDto],
  })
  games: MultiplayerGameDto[];

  @ApiProperty({
    description: 'Pagination metadata',
    type: 'object',
    additionalProperties: true,
  })
  meta: any;

  @ApiProperty({
    description: 'Message',
    example: 'Game history retrieved successfully',
  })
  message: string;
}

export class MultiplayerStatsDto {
  @ApiProperty({
    description: 'Total number of multiplayer games',
    example: 150,
  })
  totalGames: number;

  @ApiProperty({
    description: 'Number of active games',
    example: 5,
  })
  activeGames: number;

  @ApiProperty({
    description: 'Number of waiting games',
    example: 3,
  })
  waitingGames: number;

  @ApiProperty({
    description: 'Average bet value',
    example: 85.5,
  })
  averageBet: number;

  @ApiProperty({
    description: 'Average thinking time',
    example: 45.2,
  })
  averageThinkingTime: number;

  @ApiProperty({
    description: 'Top players by number of wins',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        id: { type: 'string' },
        username: { type: 'string' },
        wins: { type: 'number' },
        totalGames: { type: 'number' },
        winRate: { type: 'number' },
      },
    },
  })
  topWinners: Array<{
    id: string;
    username: string;
    wins: number;
    totalGames: number;
    winRate: number;
  }>;

  @ApiProperty({
    description: 'Message',
    example: 'Multiplayer statistics retrieved successfully',
  })
  message: string;
}
